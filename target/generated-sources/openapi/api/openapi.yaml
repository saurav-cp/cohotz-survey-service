openapi: 3.0.1
info:
  description: Cohotz Profile Service
  title: Cohotz Profile Service
  version: "1.0"
servers:
- description: Generated server url
  url: http://localhost:18083
paths:
  /api/users/{id}:
    delete:
      operationId: delete
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: tenant
        required: true
        schema:
          type: string
        style: form
      responses:
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Internal Server Error
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/getOne_400_response'
          description: Bad Request
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Forbidden
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Unauthorized
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseVoid'
          description: OK
      summary: Delete an existing User of a tenant
      tags:
      - User
      x-accepts: '*/*'
    get:
      operationId: getOne
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: tenant
        required: true
        schema:
          type: string
        style: form
      responses:
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Internal Server Error
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/getOne_400_response'
          description: Bad Request
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Forbidden
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Unauthorized
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseUserRes'
          description: OK
      summary: User Details
      tags:
      - User
      x-accepts: '*/*'
    put:
      operationId: update
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: tenant
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Internal Server Error
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/getOne_400_response'
          description: Bad Request
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Forbidden
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Unauthorized
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseUserRes'
          description: OK
      summary: Update an User
      tags:
      - User
      x-content-type: application/json
      x-accepts: '*/*'
  /api/users:
    get:
      operationId: listUser
      parameters:
      - explode: true
        in: query
        name: tenant
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Internal Server Error
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/getOne_400_response'
          description: Bad Request
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Forbidden
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Unauthorized
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseListUserMinRes'
          description: OK
      summary: Fetch All Users
      tags:
      - User
      x-accepts: '*/*'
    post:
      operationId: saveUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Internal Server Error
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/getOne_400_response'
          description: Bad Request
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Forbidden
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Unauthorized
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseUserRes'
          description: OK
      summary: Create a new user/Account
      tags:
      - User
      x-content-type: application/json
      x-accepts: '*/*'
  /api/init:
    post:
      operationId: init
      responses:
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Internal Server Error
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/getOne_400_response'
          description: Bad Request
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Forbidden
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Unauthorized
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseVoid'
          description: OK
      tags:
      - App DB Initializer
      x-accepts: '*/*'
  /api/users/reporting/{reportingToEmail}:
    get:
      operationId: listUsersReportingTo
      parameters:
      - explode: false
        in: path
        name: reportingToEmail
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: tenant
        required: true
        schema:
          type: string
        style: form
      responses:
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Internal Server Error
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/getOne_400_response'
          description: Bad Request
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Forbidden
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Unauthorized
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseListUserRes'
          description: OK
      summary: Fetch all users with param reportingToEmail
      tags:
      - User
      x-accepts: '*/*'
  /api/users/hierarchy:
    get:
      operationId: findHierarchyByEmailAndTenant
      parameters:
      - explode: true
        in: query
        name: email
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: tenant
        required: true
        schema:
          type: string
        style: form
      responses:
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Internal Server Error
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/getOne_400_response'
          description: Bad Request
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Forbidden
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Unauthorized
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseListString'
          description: OK
      summary: User Reporting Hierarchy
      tags:
      - User
      x-accepts: '*/*'
  /api/users/details:
    get:
      operationId: findByEmailAndTenant
      parameters:
      - explode: true
        in: query
        name: email
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: tenant
        required: true
        schema:
          type: string
        style: form
      responses:
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Internal Server Error
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/getOne_400_response'
          description: Bad Request
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Forbidden
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Unauthorized
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseUserRes'
          description: OK
      summary: User Details from tenant and email
      tags:
      - User
      x-accepts: '*/*'
  /api/users/tenant/{tenant}:
    delete:
      operationId: deleteByTenant
      parameters:
      - explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Internal Server Error
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/getOne_400_response'
          description: Bad Request
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Forbidden
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseErrorDetail'
          description: Unauthorized
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseVoid'
          description: OK
      summary: Delete all Users of a tenant
      tags:
      - User
      x-accepts: '*/*'
components:
  schemas:
    ApiResponseErrorDetail:
      properties:
        status:
          format: int32
          type: integer
        message:
          type: string
        result:
          $ref: '#/components/schemas/ErrorDetail'
      type: object
    ErrorDetail:
      properties:
        errorCode:
          type: string
        errorMessage:
          type: string
      type: object
    ApiResponseMapStringString:
      properties:
        status:
          format: int32
          type: integer
        message:
          type: string
        result:
          additionalProperties:
            type: string
          type: object
      type: object
    CommunicationChannel:
      example:
        type: SLACK
        channelId: channelId
        workspaceId: workspaceId
      properties:
        channelId:
          type: string
        type:
          enum:
          - SLACK
          - MICROSOFT_TEAMS
          - SKYPE
          - TELEGRAM
          - WHATSAPP
          - CUSTOM
          - CP_DASHBOARD
          - CP_MOBILE_APP
          type: string
        workspaceId:
          type: string
      type: object
    UserDTO:
      example:
        lastName: lastName
        role: role
        level2Manager: level2Manager
        gender: gender
        project: project
        personalEmail: personalEmail
        division: division
        workLocation: workLocation
        bloodGroup: bloodGroup
        previousExperience: 6.027456183070403
        presentAddress: presentAddress
        client: client
        id: 0
        permanentAddress: permanentAddress
        department: department
        emergencyContactRel: emergencyContactRel
        email: email
        tenant: tenant
        matchingPassword: matchingPassword
        emergencyContact: emergencyContact
        mobile: mobile
        active: true
        employeeId: employeeId
        employeeBand: employeeBand
        firstName: firstName
        employeeType: employeeType
        channels:
        - type: SLACK
          channelId: channelId
          workspaceId: workspaceId
        - type: SLACK
          channelId: channelId
          workspaceId: workspaceId
        dob: 2000-01-23
        totalExperience: 5.962133916683182
        currentExperience: 1.4658129805029452
        doe: 2000-01-23
        designation: designation
        reportingToEmail: reportingToEmail
        doj: 2000-01-23
        employeeRole: employeeRole
      properties:
        id:
          format: int32
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        matchingPassword:
          type: string
        role:
          type: string
        tenant:
          type: string
        reportingToEmail:
          type: string
        employeeId:
          type: string
        gender:
          type: string
        dob:
          format: date
          type: string
        doj:
          format: date
          type: string
        doe:
          format: date
          type: string
        division:
          type: string
        project:
          type: string
        client:
          type: string
        employeeType:
          type: string
        designation:
          type: string
        department:
          type: string
        employeeRole:
          type: string
        employeeBand:
          type: string
        workLocation:
          type: string
        level2Manager:
          type: string
        mobile:
          type: string
        presentAddress:
          type: string
        permanentAddress:
          type: string
        emergencyContact:
          type: string
        emergencyContactRel:
          type: string
        personalEmail:
          type: string
        bloodGroup:
          type: string
        previousExperience:
          format: double
          type: number
        currentExperience:
          format: double
          type: number
        totalExperience:
          format: double
          type: number
        channels:
          items:
            $ref: '#/components/schemas/CommunicationChannel'
          type: array
        active:
          type: boolean
      required:
      - email
      - firstName
      - lastName
      - matchingPassword
      - tenant
      type: object
    ApiResponseUserRes:
      example:
        result:
          lastName: lastName
          role: role
          active: true
          workLocation: workLocation
          firstName: firstName
          totalExperience: 6.027456183070403
          currentExperience: 1.4658129805029452
          name: name
          id: id
          reportingToEmail: reportingToEmail
          department: department
          email: email
          tenant: tenant
          username: username
        message: message
        status: 0
      properties:
        status:
          format: int32
          type: integer
        message:
          type: string
        result:
          $ref: '#/components/schemas/UserRes'
      type: object
    UserRes:
      example:
        lastName: lastName
        role: role
        active: true
        workLocation: workLocation
        firstName: firstName
        totalExperience: 6.027456183070403
        currentExperience: 1.4658129805029452
        name: name
        id: id
        reportingToEmail: reportingToEmail
        department: department
        email: email
        tenant: tenant
        username: username
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        name:
          type: string
        username:
          type: string
        email:
          type: string
        role:
          type: string
        tenant:
          type: string
        reportingToEmail:
          type: string
        workLocation:
          type: string
        department:
          type: string
        totalExperience:
          format: double
          type: number
        currentExperience:
          format: double
          type: number
        active:
          type: boolean
      type: object
    ApiResponseVoid:
      example:
        result: "{}"
        message: message
        status: 0
      properties:
        status:
          format: int32
          type: integer
        message:
          type: string
        result:
          type: object
      type: object
    ApiResponseListUserMinRes:
      example:
        result:
        - firstName: firstName
          lastName: lastName
          role: role
          name: name
          active: true
          id: id
          email: email
          tenant: tenant
          username: username
        - firstName: firstName
          lastName: lastName
          role: role
          name: name
          active: true
          id: id
          email: email
          tenant: tenant
          username: username
        message: message
        status: 0
      properties:
        status:
          format: int32
          type: integer
        message:
          type: string
        result:
          items:
            $ref: '#/components/schemas/UserMinRes'
          type: array
      type: object
    UserMinRes:
      example:
        firstName: firstName
        lastName: lastName
        role: role
        name: name
        active: true
        id: id
        email: email
        tenant: tenant
        username: username
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        name:
          type: string
        username:
          type: string
        email:
          type: string
        role:
          type: string
        tenant:
          type: string
        active:
          type: boolean
      type: object
    ApiResponseListUserRes:
      example:
        result:
        - lastName: lastName
          role: role
          active: true
          workLocation: workLocation
          firstName: firstName
          totalExperience: 6.027456183070403
          currentExperience: 1.4658129805029452
          name: name
          id: id
          reportingToEmail: reportingToEmail
          department: department
          email: email
          tenant: tenant
          username: username
        - lastName: lastName
          role: role
          active: true
          workLocation: workLocation
          firstName: firstName
          totalExperience: 6.027456183070403
          currentExperience: 1.4658129805029452
          name: name
          id: id
          reportingToEmail: reportingToEmail
          department: department
          email: email
          tenant: tenant
          username: username
        message: message
        status: 0
      properties:
        status:
          format: int32
          type: integer
        message:
          type: string
        result:
          items:
            $ref: '#/components/schemas/UserRes'
          type: array
      type: object
    ApiResponseListString:
      example:
        result:
        - result
        - result
        message: message
        status: 0
      properties:
        status:
          format: int32
          type: integer
        message:
          type: string
        result:
          items:
            type: string
          type: array
      type: object
    getOne_400_response:
      oneOf:
      - $ref: '#/components/schemas/ApiResponseMapStringString'
      - $ref: '#/components/schemas/ApiResponseErrorDetail'
  securitySchemes:
    cohotz-profile-service:
      in: header
      scheme: bearer
      type: http

