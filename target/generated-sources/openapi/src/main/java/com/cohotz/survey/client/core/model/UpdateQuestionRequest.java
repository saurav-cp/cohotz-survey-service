/*
 * Cohotz Core Service
 * Cohotz Core Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cohotz.survey.client.core.model;

import java.util.Objects;
import java.util.Arrays;
import com.cohotz.survey.client.core.model.ChoiceBasedQuestionDTO;
import com.cohotz.survey.client.core.model.ResponseOption;
import com.cohotz.survey.client.core.model.TextResponseBasedQuestionDTO;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * UpdateQuestionRequest
 */
@JsonPropertyOrder({
  UpdateQuestionRequest.JSON_PROPERTY_TENANT,
  UpdateQuestionRequest.JSON_PROPERTY_TEXT,
  UpdateQuestionRequest.JSON_PROPERTY_CODE,
  UpdateQuestionRequest.JSON_PROPERTY_RESPONSE_TYPE,
  UpdateQuestionRequest.JSON_PROPERTY_MAX,
  UpdateQuestionRequest.JSON_PROPERTY_ENGINE_CODE,
  UpdateQuestionRequest.JSON_PROPERTY_TYPE,
  UpdateQuestionRequest.JSON_PROPERTY_CATEGORY,
  UpdateQuestionRequest.JSON_PROPERTY_LEVEL,
  UpdateQuestionRequest.JSON_PROPERTY_TARGET,
  UpdateQuestionRequest.JSON_PROPERTY_ACTIVE
})
@JsonTypeName("updateQuestion_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-08T23:22:50.644014200+05:30[Asia/Calcutta]")
@JsonIgnoreProperties(
  value = "responseType", // ignore manually set responseType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the responseType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "responseType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = ChoiceBasedQuestionDTO.class, name = "ChoiceBasedQuestionDTO"),
  @JsonSubTypes.Type(value = TextResponseBasedQuestionDTO.class, name = "TextResponseBasedQuestionDTO"),
})

public class UpdateQuestionRequest {
  public static final String JSON_PROPERTY_TENANT = "tenant";
  private String tenant;

  public static final String JSON_PROPERTY_TEXT = "text";
  private String text;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_RESPONSE_TYPE = "responseType";
  protected String responseType;

  public static final String JSON_PROPERTY_MAX = "max";
  private Double max;

  public static final String JSON_PROPERTY_ENGINE_CODE = "engineCode";
  private String engineCode;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    SURVEY("SURVEY"),
    
    RUBICA("RUBICA");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  /**
   * Gets or Sets category
   */
  public enum CategoryEnum {
    SURVEY("SURVEY"),
    
    MANAGER_FEEDBACK("MANAGER_FEEDBACK"),
    
    INITIAL_INFO_COLLECTION("INITIAL_INFO_COLLECTION"),
    
    REGULAR_INFO_REFRESH("REGULAR_INFO_REFRESH"),
    
    MODERATE_NEGATIVE_FALL("MODERATE_NEGATIVE_FALL"),
    
    SHARP_NEGATIVE_FALL("SHARP_NEGATIVE_FALL"),
    
    MODERATE_POSITIVE_RISE("MODERATE_POSITIVE_RISE"),
    
    SHARP_POSITIVE_RISE("SHARP_POSITIVE_RISE");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CATEGORY = "category";
  private CategoryEnum category;

  /**
   * Gets or Sets level
   */
  public enum LevelEnum {
    ONE("ONE"),
    
    TWO("TWO"),
    
    THREE("THREE");

    private String value;

    LevelEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LevelEnum fromValue(String value) {
      for (LevelEnum b : LevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_LEVEL = "level";
  private LevelEnum level;

  /**
   * Gets or Sets target
   */
  public enum TargetEnum {
    ONE("ONE"),
    
    TWO("TWO"),
    
    THREE("THREE"),
    
    FOUR("FOUR"),
    
    FIVE("FIVE"),
    
    SIX("SIX"),
    
    SEVEN("SEVEN"),
    
    EIGHT("EIGHT"),
    
    NINE("NINE"),
    
    TEN("TEN");

    private String value;

    TargetEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TargetEnum fromValue(String value) {
      for (TargetEnum b : TargetEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TARGET = "target";
  private TargetEnum target;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  public UpdateQuestionRequest() { 
  }

  public UpdateQuestionRequest tenant(String tenant) {
    
    this.tenant = tenant;
    return this;
  }

   /**
   * Get tenant
   * @return tenant
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TENANT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTenant() {
    return tenant;
  }


  @JsonProperty(JSON_PROPERTY_TENANT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTenant(String tenant) {
    this.tenant = tenant;
  }


  public UpdateQuestionRequest text(String text) {
    
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getText() {
    return text;
  }


  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setText(String text) {
    this.text = text;
  }


  public UpdateQuestionRequest code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCode(String code) {
    this.code = code;
  }


  public UpdateQuestionRequest responseType(String responseType) {
    
    this.responseType = responseType;
    return this;
  }

   /**
   * Get responseType
   * @return responseType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_RESPONSE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getResponseType() {
    return responseType;
  }


  @JsonProperty(JSON_PROPERTY_RESPONSE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResponseType(String responseType) {
    this.responseType = responseType;
  }


  public UpdateQuestionRequest max(Double max) {
    
    this.max = max;
    return this;
  }

   /**
   * Get max
   * @return max
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getMax() {
    return max;
  }


  @JsonProperty(JSON_PROPERTY_MAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMax(Double max) {
    this.max = max;
  }


  public UpdateQuestionRequest engineCode(String engineCode) {
    
    this.engineCode = engineCode;
    return this;
  }

   /**
   * Get engineCode
   * @return engineCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ENGINE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEngineCode() {
    return engineCode;
  }


  @JsonProperty(JSON_PROPERTY_ENGINE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEngineCode(String engineCode) {
    this.engineCode = engineCode;
  }


  public UpdateQuestionRequest type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public UpdateQuestionRequest category(CategoryEnum category) {
    
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CategoryEnum getCategory() {
    return category;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public UpdateQuestionRequest level(LevelEnum level) {
    
    this.level = level;
    return this;
  }

   /**
   * Get level
   * @return level
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LevelEnum getLevel() {
    return level;
  }


  @JsonProperty(JSON_PROPERTY_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLevel(LevelEnum level) {
    this.level = level;
  }


  public UpdateQuestionRequest target(TargetEnum target) {
    
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TARGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TargetEnum getTarget() {
    return target;
  }


  @JsonProperty(JSON_PROPERTY_TARGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTarget(TargetEnum target) {
    this.target = target;
  }


  public UpdateQuestionRequest active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateQuestionRequest updateQuestionRequest = (UpdateQuestionRequest) o;
    return Objects.equals(this.tenant, updateQuestionRequest.tenant) &&
        Objects.equals(this.text, updateQuestionRequest.text) &&
        Objects.equals(this.code, updateQuestionRequest.code) &&
        Objects.equals(this.responseType, updateQuestionRequest.responseType) &&
        Objects.equals(this.max, updateQuestionRequest.max) &&
        Objects.equals(this.engineCode, updateQuestionRequest.engineCode) &&
        Objects.equals(this.type, updateQuestionRequest.type) &&
        Objects.equals(this.category, updateQuestionRequest.category) &&
        Objects.equals(this.level, updateQuestionRequest.level) &&
        Objects.equals(this.target, updateQuestionRequest.target) &&
        Objects.equals(this.active, updateQuestionRequest.active);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tenant, text, code, responseType, max, engineCode, type, category, level, target, active);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateQuestionRequest {\n");
    sb.append("    tenant: ").append(toIndentedString(tenant)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    responseType: ").append(toIndentedString(responseType)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    engineCode: ").append(toIndentedString(engineCode)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

