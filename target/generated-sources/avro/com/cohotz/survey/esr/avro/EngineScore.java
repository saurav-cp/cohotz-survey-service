/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.cohotz.survey.esr.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EngineScore extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8821121329914898895L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EngineScore\",\"namespace\":\"com.cohotz.survey.esr.avro\",\"fields\":[{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"reportingTo\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"reportingHierarchy\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"tenant\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"averageScore\",\"type\":\"double\"},{\"name\":\"totalScore\",\"type\":\"double\"},{\"name\":\"responses\",\"type\":\"int\"},{\"name\":\"source\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"engine\",\"type\":{\"type\":\"record\",\"name\":\"EngineDetails\",\"fields\":[{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"block\",\"type\":{\"type\":\"record\",\"name\":\"BlockDetails\",\"fields\":[{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"cohorts\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Cohort\",\"fields\":[{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EngineScore> ENCODER =
      new BinaryMessageEncoder<EngineScore>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EngineScore> DECODER =
      new BinaryMessageDecoder<EngineScore>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EngineScore> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EngineScore> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EngineScore>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EngineScore to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EngineScore from a ByteBuffer. */
  public static EngineScore fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String email;
   private java.lang.String reportingTo;
   private java.util.List<java.lang.String> reportingHierarchy;
   private java.lang.String tenant;
   private double averageScore;
   private double totalScore;
   private int responses;
   private java.lang.String source;
   private com.cohotz.survey.esr.avro.EngineDetails engine;
   private com.cohotz.survey.esr.avro.BlockDetails block;
   private java.util.List<com.cohotz.survey.esr.avro.Cohort> cohorts;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EngineScore() {}

  /**
   * All-args constructor.
   * @param email The new value for email
   * @param reportingTo The new value for reportingTo
   * @param reportingHierarchy The new value for reportingHierarchy
   * @param tenant The new value for tenant
   * @param averageScore The new value for averageScore
   * @param totalScore The new value for totalScore
   * @param responses The new value for responses
   * @param source The new value for source
   * @param engine The new value for engine
   * @param block The new value for block
   * @param cohorts The new value for cohorts
   */
  public EngineScore(java.lang.String email, java.lang.String reportingTo, java.util.List<java.lang.String> reportingHierarchy, java.lang.String tenant, java.lang.Double averageScore, java.lang.Double totalScore, java.lang.Integer responses, java.lang.String source, com.cohotz.survey.esr.avro.EngineDetails engine, com.cohotz.survey.esr.avro.BlockDetails block, java.util.List<com.cohotz.survey.esr.avro.Cohort> cohorts) {
    this.email = email;
    this.reportingTo = reportingTo;
    this.reportingHierarchy = reportingHierarchy;
    this.tenant = tenant;
    this.averageScore = averageScore;
    this.totalScore = totalScore;
    this.responses = responses;
    this.source = source;
    this.engine = engine;
    this.block = block;
    this.cohorts = cohorts;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return email;
    case 1: return reportingTo;
    case 2: return reportingHierarchy;
    case 3: return tenant;
    case 4: return averageScore;
    case 5: return totalScore;
    case 6: return responses;
    case 7: return source;
    case 8: return engine;
    case 9: return block;
    case 10: return cohorts;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: email = (java.lang.String)value$; break;
    case 1: reportingTo = (java.lang.String)value$; break;
    case 2: reportingHierarchy = (java.util.List<java.lang.String>)value$; break;
    case 3: tenant = (java.lang.String)value$; break;
    case 4: averageScore = (java.lang.Double)value$; break;
    case 5: totalScore = (java.lang.Double)value$; break;
    case 6: responses = (java.lang.Integer)value$; break;
    case 7: source = (java.lang.String)value$; break;
    case 8: engine = (com.cohotz.survey.esr.avro.EngineDetails)value$; break;
    case 9: block = (com.cohotz.survey.esr.avro.BlockDetails)value$; break;
    case 10: cohorts = (java.util.List<com.cohotz.survey.esr.avro.Cohort>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.String getEmail() {
    return email;
  }


  /**
   * Gets the value of the 'reportingTo' field.
   * @return The value of the 'reportingTo' field.
   */
  public java.lang.String getReportingTo() {
    return reportingTo;
  }


  /**
   * Gets the value of the 'reportingHierarchy' field.
   * @return The value of the 'reportingHierarchy' field.
   */
  public java.util.List<java.lang.String> getReportingHierarchy() {
    return reportingHierarchy;
  }


  /**
   * Gets the value of the 'tenant' field.
   * @return The value of the 'tenant' field.
   */
  public java.lang.String getTenant() {
    return tenant;
  }


  /**
   * Gets the value of the 'averageScore' field.
   * @return The value of the 'averageScore' field.
   */
  public java.lang.Double getAverageScore() {
    return averageScore;
  }


  /**
   * Gets the value of the 'totalScore' field.
   * @return The value of the 'totalScore' field.
   */
  public java.lang.Double getTotalScore() {
    return totalScore;
  }


  /**
   * Gets the value of the 'responses' field.
   * @return The value of the 'responses' field.
   */
  public java.lang.Integer getResponses() {
    return responses;
  }


  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public java.lang.String getSource() {
    return source;
  }


  /**
   * Gets the value of the 'engine' field.
   * @return The value of the 'engine' field.
   */
  public com.cohotz.survey.esr.avro.EngineDetails getEngine() {
    return engine;
  }


  /**
   * Gets the value of the 'block' field.
   * @return The value of the 'block' field.
   */
  public com.cohotz.survey.esr.avro.BlockDetails getBlock() {
    return block;
  }


  /**
   * Gets the value of the 'cohorts' field.
   * @return The value of the 'cohorts' field.
   */
  public java.util.List<com.cohotz.survey.esr.avro.Cohort> getCohorts() {
    return cohorts;
  }


  /**
   * Creates a new EngineScore RecordBuilder.
   * @return A new EngineScore RecordBuilder
   */
  public static com.cohotz.survey.esr.avro.EngineScore.Builder newBuilder() {
    return new com.cohotz.survey.esr.avro.EngineScore.Builder();
  }

  /**
   * Creates a new EngineScore RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EngineScore RecordBuilder
   */
  public static com.cohotz.survey.esr.avro.EngineScore.Builder newBuilder(com.cohotz.survey.esr.avro.EngineScore.Builder other) {
    return new com.cohotz.survey.esr.avro.EngineScore.Builder(other);
  }

  /**
   * Creates a new EngineScore RecordBuilder by copying an existing EngineScore instance.
   * @param other The existing instance to copy.
   * @return A new EngineScore RecordBuilder
   */
  public static com.cohotz.survey.esr.avro.EngineScore.Builder newBuilder(com.cohotz.survey.esr.avro.EngineScore other) {
    return new com.cohotz.survey.esr.avro.EngineScore.Builder(other);
  }

  /**
   * RecordBuilder for EngineScore instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EngineScore>
    implements org.apache.avro.data.RecordBuilder<EngineScore> {

    private java.lang.String email;
    private java.lang.String reportingTo;
    private java.util.List<java.lang.String> reportingHierarchy;
    private java.lang.String tenant;
    private double averageScore;
    private double totalScore;
    private int responses;
    private java.lang.String source;
    private com.cohotz.survey.esr.avro.EngineDetails engine;
    private com.cohotz.survey.esr.avro.EngineDetails.Builder engineBuilder;
    private com.cohotz.survey.esr.avro.BlockDetails block;
    private com.cohotz.survey.esr.avro.BlockDetails.Builder blockBuilder;
    private java.util.List<com.cohotz.survey.esr.avro.Cohort> cohorts;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.cohotz.survey.esr.avro.EngineScore.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.email)) {
        this.email = data().deepCopy(fields()[0].schema(), other.email);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.reportingTo)) {
        this.reportingTo = data().deepCopy(fields()[1].schema(), other.reportingTo);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.reportingHierarchy)) {
        this.reportingHierarchy = data().deepCopy(fields()[2].schema(), other.reportingHierarchy);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tenant)) {
        this.tenant = data().deepCopy(fields()[3].schema(), other.tenant);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.averageScore)) {
        this.averageScore = data().deepCopy(fields()[4].schema(), other.averageScore);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.totalScore)) {
        this.totalScore = data().deepCopy(fields()[5].schema(), other.totalScore);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.responses)) {
        this.responses = data().deepCopy(fields()[6].schema(), other.responses);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.source)) {
        this.source = data().deepCopy(fields()[7].schema(), other.source);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.engine)) {
        this.engine = data().deepCopy(fields()[8].schema(), other.engine);
        fieldSetFlags()[8] = true;
      }
      if (other.hasEngineBuilder()) {
        this.engineBuilder = com.cohotz.survey.esr.avro.EngineDetails.newBuilder(other.getEngineBuilder());
      }
      if (isValidValue(fields()[9], other.block)) {
        this.block = data().deepCopy(fields()[9].schema(), other.block);
        fieldSetFlags()[9] = true;
      }
      if (other.hasBlockBuilder()) {
        this.blockBuilder = com.cohotz.survey.esr.avro.BlockDetails.newBuilder(other.getBlockBuilder());
      }
      if (isValidValue(fields()[10], other.cohorts)) {
        this.cohorts = data().deepCopy(fields()[10].schema(), other.cohorts);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EngineScore instance
     * @param other The existing instance to copy.
     */
    private Builder(com.cohotz.survey.esr.avro.EngineScore other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.email)) {
        this.email = data().deepCopy(fields()[0].schema(), other.email);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.reportingTo)) {
        this.reportingTo = data().deepCopy(fields()[1].schema(), other.reportingTo);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.reportingHierarchy)) {
        this.reportingHierarchy = data().deepCopy(fields()[2].schema(), other.reportingHierarchy);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tenant)) {
        this.tenant = data().deepCopy(fields()[3].schema(), other.tenant);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.averageScore)) {
        this.averageScore = data().deepCopy(fields()[4].schema(), other.averageScore);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.totalScore)) {
        this.totalScore = data().deepCopy(fields()[5].schema(), other.totalScore);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.responses)) {
        this.responses = data().deepCopy(fields()[6].schema(), other.responses);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.source)) {
        this.source = data().deepCopy(fields()[7].schema(), other.source);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.engine)) {
        this.engine = data().deepCopy(fields()[8].schema(), other.engine);
        fieldSetFlags()[8] = true;
      }
      this.engineBuilder = null;
      if (isValidValue(fields()[9], other.block)) {
        this.block = data().deepCopy(fields()[9].schema(), other.block);
        fieldSetFlags()[9] = true;
      }
      this.blockBuilder = null;
      if (isValidValue(fields()[10], other.cohorts)) {
        this.cohorts = data().deepCopy(fields()[10].schema(), other.cohorts);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }

    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder setEmail(java.lang.String value) {
      validate(fields()[0], value);
      this.email = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder clearEmail() {
      email = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'reportingTo' field.
      * @return The value.
      */
    public java.lang.String getReportingTo() {
      return reportingTo;
    }

    /**
      * Sets the value of the 'reportingTo' field.
      * @param value The value of 'reportingTo'.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder setReportingTo(java.lang.String value) {
      validate(fields()[1], value);
      this.reportingTo = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'reportingTo' field has been set.
      * @return True if the 'reportingTo' field has been set, false otherwise.
      */
    public boolean hasReportingTo() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'reportingTo' field.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder clearReportingTo() {
      reportingTo = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'reportingHierarchy' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getReportingHierarchy() {
      return reportingHierarchy;
    }

    /**
      * Sets the value of the 'reportingHierarchy' field.
      * @param value The value of 'reportingHierarchy'.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder setReportingHierarchy(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.reportingHierarchy = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'reportingHierarchy' field has been set.
      * @return True if the 'reportingHierarchy' field has been set, false otherwise.
      */
    public boolean hasReportingHierarchy() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'reportingHierarchy' field.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder clearReportingHierarchy() {
      reportingHierarchy = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'tenant' field.
      * @return The value.
      */
    public java.lang.String getTenant() {
      return tenant;
    }

    /**
      * Sets the value of the 'tenant' field.
      * @param value The value of 'tenant'.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder setTenant(java.lang.String value) {
      validate(fields()[3], value);
      this.tenant = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'tenant' field has been set.
      * @return True if the 'tenant' field has been set, false otherwise.
      */
    public boolean hasTenant() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'tenant' field.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder clearTenant() {
      tenant = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'averageScore' field.
      * @return The value.
      */
    public java.lang.Double getAverageScore() {
      return averageScore;
    }

    /**
      * Sets the value of the 'averageScore' field.
      * @param value The value of 'averageScore'.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder setAverageScore(double value) {
      validate(fields()[4], value);
      this.averageScore = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'averageScore' field has been set.
      * @return True if the 'averageScore' field has been set, false otherwise.
      */
    public boolean hasAverageScore() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'averageScore' field.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder clearAverageScore() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalScore' field.
      * @return The value.
      */
    public java.lang.Double getTotalScore() {
      return totalScore;
    }

    /**
      * Sets the value of the 'totalScore' field.
      * @param value The value of 'totalScore'.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder setTotalScore(double value) {
      validate(fields()[5], value);
      this.totalScore = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'totalScore' field has been set.
      * @return True if the 'totalScore' field has been set, false otherwise.
      */
    public boolean hasTotalScore() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'totalScore' field.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder clearTotalScore() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'responses' field.
      * @return The value.
      */
    public java.lang.Integer getResponses() {
      return responses;
    }

    /**
      * Sets the value of the 'responses' field.
      * @param value The value of 'responses'.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder setResponses(int value) {
      validate(fields()[6], value);
      this.responses = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'responses' field has been set.
      * @return True if the 'responses' field has been set, false otherwise.
      */
    public boolean hasResponses() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'responses' field.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder clearResponses() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public java.lang.String getSource() {
      return source;
    }

    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder setSource(java.lang.String value) {
      validate(fields()[7], value);
      this.source = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder clearSource() {
      source = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'engine' field.
      * @return The value.
      */
    public com.cohotz.survey.esr.avro.EngineDetails getEngine() {
      return engine;
    }

    /**
      * Sets the value of the 'engine' field.
      * @param value The value of 'engine'.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder setEngine(com.cohotz.survey.esr.avro.EngineDetails value) {
      validate(fields()[8], value);
      this.engineBuilder = null;
      this.engine = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'engine' field has been set.
      * @return True if the 'engine' field has been set, false otherwise.
      */
    public boolean hasEngine() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'engine' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.cohotz.survey.esr.avro.EngineDetails.Builder getEngineBuilder() {
      if (engineBuilder == null) {
        if (hasEngine()) {
          setEngineBuilder(com.cohotz.survey.esr.avro.EngineDetails.newBuilder(engine));
        } else {
          setEngineBuilder(com.cohotz.survey.esr.avro.EngineDetails.newBuilder());
        }
      }
      return engineBuilder;
    }

    /**
     * Sets the Builder instance for the 'engine' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.cohotz.survey.esr.avro.EngineScore.Builder setEngineBuilder(com.cohotz.survey.esr.avro.EngineDetails.Builder value) {
      clearEngine();
      engineBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'engine' field has an active Builder instance
     * @return True if the 'engine' field has an active Builder instance
     */
    public boolean hasEngineBuilder() {
      return engineBuilder != null;
    }

    /**
      * Clears the value of the 'engine' field.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder clearEngine() {
      engine = null;
      engineBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'block' field.
      * @return The value.
      */
    public com.cohotz.survey.esr.avro.BlockDetails getBlock() {
      return block;
    }

    /**
      * Sets the value of the 'block' field.
      * @param value The value of 'block'.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder setBlock(com.cohotz.survey.esr.avro.BlockDetails value) {
      validate(fields()[9], value);
      this.blockBuilder = null;
      this.block = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'block' field has been set.
      * @return True if the 'block' field has been set, false otherwise.
      */
    public boolean hasBlock() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'block' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.cohotz.survey.esr.avro.BlockDetails.Builder getBlockBuilder() {
      if (blockBuilder == null) {
        if (hasBlock()) {
          setBlockBuilder(com.cohotz.survey.esr.avro.BlockDetails.newBuilder(block));
        } else {
          setBlockBuilder(com.cohotz.survey.esr.avro.BlockDetails.newBuilder());
        }
      }
      return blockBuilder;
    }

    /**
     * Sets the Builder instance for the 'block' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.cohotz.survey.esr.avro.EngineScore.Builder setBlockBuilder(com.cohotz.survey.esr.avro.BlockDetails.Builder value) {
      clearBlock();
      blockBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'block' field has an active Builder instance
     * @return True if the 'block' field has an active Builder instance
     */
    public boolean hasBlockBuilder() {
      return blockBuilder != null;
    }

    /**
      * Clears the value of the 'block' field.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder clearBlock() {
      block = null;
      blockBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'cohorts' field.
      * @return The value.
      */
    public java.util.List<com.cohotz.survey.esr.avro.Cohort> getCohorts() {
      return cohorts;
    }

    /**
      * Sets the value of the 'cohorts' field.
      * @param value The value of 'cohorts'.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder setCohorts(java.util.List<com.cohotz.survey.esr.avro.Cohort> value) {
      validate(fields()[10], value);
      this.cohorts = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'cohorts' field has been set.
      * @return True if the 'cohorts' field has been set, false otherwise.
      */
    public boolean hasCohorts() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'cohorts' field.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScore.Builder clearCohorts() {
      cohorts = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EngineScore build() {
      try {
        EngineScore record = new EngineScore();
        record.email = fieldSetFlags()[0] ? this.email : (java.lang.String) defaultValue(fields()[0]);
        record.reportingTo = fieldSetFlags()[1] ? this.reportingTo : (java.lang.String) defaultValue(fields()[1]);
        record.reportingHierarchy = fieldSetFlags()[2] ? this.reportingHierarchy : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        record.tenant = fieldSetFlags()[3] ? this.tenant : (java.lang.String) defaultValue(fields()[3]);
        record.averageScore = fieldSetFlags()[4] ? this.averageScore : (java.lang.Double) defaultValue(fields()[4]);
        record.totalScore = fieldSetFlags()[5] ? this.totalScore : (java.lang.Double) defaultValue(fields()[5]);
        record.responses = fieldSetFlags()[6] ? this.responses : (java.lang.Integer) defaultValue(fields()[6]);
        record.source = fieldSetFlags()[7] ? this.source : (java.lang.String) defaultValue(fields()[7]);
        if (engineBuilder != null) {
          record.engine = this.engineBuilder.build();
        } else {
          record.engine = fieldSetFlags()[8] ? this.engine : (com.cohotz.survey.esr.avro.EngineDetails) defaultValue(fields()[8]);
        }
        if (blockBuilder != null) {
          record.block = this.blockBuilder.build();
        } else {
          record.block = fieldSetFlags()[9] ? this.block : (com.cohotz.survey.esr.avro.BlockDetails) defaultValue(fields()[9]);
        }
        record.cohorts = fieldSetFlags()[10] ? this.cohorts : (java.util.List<com.cohotz.survey.esr.avro.Cohort>) defaultValue(fields()[10]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EngineScore>
    WRITER$ = (org.apache.avro.io.DatumWriter<EngineScore>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EngineScore>
    READER$ = (org.apache.avro.io.DatumReader<EngineScore>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
