/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.cohotz.survey.esr.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EngineScoreRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6647984020224354470L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EngineScoreRecord\",\"namespace\":\"com.cohotz.survey.esr.avro\",\"fields\":[{\"name\":\"metadata\",\"type\":{\"type\":\"record\",\"name\":\"MetaData\",\"fields\":[{\"name\":\"traceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"source\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"data\",\"type\":{\"type\":\"record\",\"name\":\"EngineScore\",\"fields\":[{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"reportingTo\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"reportingHierarchy\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"tenant\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"averageScore\",\"type\":\"double\"},{\"name\":\"totalScore\",\"type\":\"double\"},{\"name\":\"responses\",\"type\":\"int\"},{\"name\":\"source\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"engine\",\"type\":{\"type\":\"record\",\"name\":\"EngineDetails\",\"fields\":[{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"block\",\"type\":{\"type\":\"record\",\"name\":\"BlockDetails\",\"fields\":[{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"cohorts\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Cohort\",\"fields\":[{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EngineScoreRecord> ENCODER =
      new BinaryMessageEncoder<EngineScoreRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EngineScoreRecord> DECODER =
      new BinaryMessageDecoder<EngineScoreRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EngineScoreRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EngineScoreRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EngineScoreRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EngineScoreRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EngineScoreRecord from a ByteBuffer. */
  public static EngineScoreRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private com.cohotz.survey.esr.avro.MetaData metadata;
   private com.cohotz.survey.esr.avro.EngineScore data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EngineScoreRecord() {}

  /**
   * All-args constructor.
   * @param metadata The new value for metadata
   * @param data The new value for data
   */
  public EngineScoreRecord(com.cohotz.survey.esr.avro.MetaData metadata, com.cohotz.survey.esr.avro.EngineScore data) {
    this.metadata = metadata;
    this.data = data;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return metadata;
    case 1: return data;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: metadata = (com.cohotz.survey.esr.avro.MetaData)value$; break;
    case 1: data = (com.cohotz.survey.esr.avro.EngineScore)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'metadata' field.
   * @return The value of the 'metadata' field.
   */
  public com.cohotz.survey.esr.avro.MetaData getMetadata() {
    return metadata;
  }


  /**
   * Gets the value of the 'data' field.
   * @return The value of the 'data' field.
   */
  public com.cohotz.survey.esr.avro.EngineScore getData() {
    return data;
  }


  /**
   * Creates a new EngineScoreRecord RecordBuilder.
   * @return A new EngineScoreRecord RecordBuilder
   */
  public static com.cohotz.survey.esr.avro.EngineScoreRecord.Builder newBuilder() {
    return new com.cohotz.survey.esr.avro.EngineScoreRecord.Builder();
  }

  /**
   * Creates a new EngineScoreRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EngineScoreRecord RecordBuilder
   */
  public static com.cohotz.survey.esr.avro.EngineScoreRecord.Builder newBuilder(com.cohotz.survey.esr.avro.EngineScoreRecord.Builder other) {
    return new com.cohotz.survey.esr.avro.EngineScoreRecord.Builder(other);
  }

  /**
   * Creates a new EngineScoreRecord RecordBuilder by copying an existing EngineScoreRecord instance.
   * @param other The existing instance to copy.
   * @return A new EngineScoreRecord RecordBuilder
   */
  public static com.cohotz.survey.esr.avro.EngineScoreRecord.Builder newBuilder(com.cohotz.survey.esr.avro.EngineScoreRecord other) {
    return new com.cohotz.survey.esr.avro.EngineScoreRecord.Builder(other);
  }

  /**
   * RecordBuilder for EngineScoreRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EngineScoreRecord>
    implements org.apache.avro.data.RecordBuilder<EngineScoreRecord> {

    private com.cohotz.survey.esr.avro.MetaData metadata;
    private com.cohotz.survey.esr.avro.MetaData.Builder metadataBuilder;
    private com.cohotz.survey.esr.avro.EngineScore data;
    private com.cohotz.survey.esr.avro.EngineScore.Builder dataBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.cohotz.survey.esr.avro.EngineScoreRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.metadata)) {
        this.metadata = data().deepCopy(fields()[0].schema(), other.metadata);
        fieldSetFlags()[0] = true;
      }
      if (other.hasMetadataBuilder()) {
        this.metadataBuilder = com.cohotz.survey.esr.avro.MetaData.newBuilder(other.getMetadataBuilder());
      }
      if (isValidValue(fields()[1], other.data)) {
        this.data = data().deepCopy(fields()[1].schema(), other.data);
        fieldSetFlags()[1] = true;
      }
      if (other.hasDataBuilder()) {
        this.dataBuilder = com.cohotz.survey.esr.avro.EngineScore.newBuilder(other.getDataBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing EngineScoreRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.cohotz.survey.esr.avro.EngineScoreRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.metadata)) {
        this.metadata = data().deepCopy(fields()[0].schema(), other.metadata);
        fieldSetFlags()[0] = true;
      }
      this.metadataBuilder = null;
      if (isValidValue(fields()[1], other.data)) {
        this.data = data().deepCopy(fields()[1].schema(), other.data);
        fieldSetFlags()[1] = true;
      }
      this.dataBuilder = null;
    }

    /**
      * Gets the value of the 'metadata' field.
      * @return The value.
      */
    public com.cohotz.survey.esr.avro.MetaData getMetadata() {
      return metadata;
    }

    /**
      * Sets the value of the 'metadata' field.
      * @param value The value of 'metadata'.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScoreRecord.Builder setMetadata(com.cohotz.survey.esr.avro.MetaData value) {
      validate(fields()[0], value);
      this.metadataBuilder = null;
      this.metadata = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'metadata' field has been set.
      * @return True if the 'metadata' field has been set, false otherwise.
      */
    public boolean hasMetadata() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'metadata' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.cohotz.survey.esr.avro.MetaData.Builder getMetadataBuilder() {
      if (metadataBuilder == null) {
        if (hasMetadata()) {
          setMetadataBuilder(com.cohotz.survey.esr.avro.MetaData.newBuilder(metadata));
        } else {
          setMetadataBuilder(com.cohotz.survey.esr.avro.MetaData.newBuilder());
        }
      }
      return metadataBuilder;
    }

    /**
     * Sets the Builder instance for the 'metadata' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.cohotz.survey.esr.avro.EngineScoreRecord.Builder setMetadataBuilder(com.cohotz.survey.esr.avro.MetaData.Builder value) {
      clearMetadata();
      metadataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'metadata' field has an active Builder instance
     * @return True if the 'metadata' field has an active Builder instance
     */
    public boolean hasMetadataBuilder() {
      return metadataBuilder != null;
    }

    /**
      * Clears the value of the 'metadata' field.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScoreRecord.Builder clearMetadata() {
      metadata = null;
      metadataBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * @return The value.
      */
    public com.cohotz.survey.esr.avro.EngineScore getData() {
      return data;
    }

    /**
      * Sets the value of the 'data' field.
      * @param value The value of 'data'.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScoreRecord.Builder setData(com.cohotz.survey.esr.avro.EngineScore value) {
      validate(fields()[1], value);
      this.dataBuilder = null;
      this.data = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'data' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.cohotz.survey.esr.avro.EngineScore.Builder getDataBuilder() {
      if (dataBuilder == null) {
        if (hasData()) {
          setDataBuilder(com.cohotz.survey.esr.avro.EngineScore.newBuilder(data));
        } else {
          setDataBuilder(com.cohotz.survey.esr.avro.EngineScore.newBuilder());
        }
      }
      return dataBuilder;
    }

    /**
     * Sets the Builder instance for the 'data' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.cohotz.survey.esr.avro.EngineScoreRecord.Builder setDataBuilder(com.cohotz.survey.esr.avro.EngineScore.Builder value) {
      clearData();
      dataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'data' field has an active Builder instance
     * @return True if the 'data' field has an active Builder instance
     */
    public boolean hasDataBuilder() {
      return dataBuilder != null;
    }

    /**
      * Clears the value of the 'data' field.
      * @return This builder.
      */
    public com.cohotz.survey.esr.avro.EngineScoreRecord.Builder clearData() {
      data = null;
      dataBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EngineScoreRecord build() {
      try {
        EngineScoreRecord record = new EngineScoreRecord();
        if (metadataBuilder != null) {
          record.metadata = this.metadataBuilder.build();
        } else {
          record.metadata = fieldSetFlags()[0] ? this.metadata : (com.cohotz.survey.esr.avro.MetaData) defaultValue(fields()[0]);
        }
        if (dataBuilder != null) {
          record.data = this.dataBuilder.build();
        } else {
          record.data = fieldSetFlags()[1] ? this.data : (com.cohotz.survey.esr.avro.EngineScore) defaultValue(fields()[1]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EngineScoreRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<EngineScoreRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EngineScoreRecord>
    READER$ = (org.apache.avro.io.DatumReader<EngineScoreRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
